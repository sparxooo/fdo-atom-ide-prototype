using Microsoft.VisualStudio.TestTools.UnitTesting;
using P3FDOAtomParsing;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

namespace P3FDOAtomParsing.Tests
{
    [TestClass()]
    public class FDOTests
    {
        [TestMethod()]
        public void CheckDataCopiedCorrectly()
        {
            string packet = "5a02f8003c1010a044640031000100010a0400000001010b040000000203010a47756573742020202020011d00011d00010a040000000203010120011d000002000d";

            P3Packet p = new P3Packet(Convert.FromHexString(packet));

            p.FDO = new FDO(p.Data);

            Assert.IsTrue(p.FDO.Token == "Dd", "Token Type is Incorrect");

            // Check if the data is copied correctly

            byte[] fullData = new byte[p.DataSize];
            fullData[0] = 0x44;
            fullData[1] = 0x64;
            Array.Copy(p.FDO.RawData, 0, fullData, 2, p.FDO.RawData.Length);

            CollectionAssert.AreEqual(p.Data, fullData, "The data copied into the FDO RawData array is incorrect");
        }

        [TestMethod()]  
        public void CheckReadsStreamIDCorrectly()
        {
            string packet = "5aa43d02f1131120415403f20001000d040002320101001303200128010901010c010500000000000c000500000000a1011d000109013501000101102401011003010010040100100c0320001e1008015b10400105103a0320001e01000108190000101702371c100b010110010101010200010a010101142c3c68313e57656c636f6d6520746f2052652d414f4c205b414c5048415d2c204775657374384c553c2f68313e01146f3c623e446973636c61696d65723c2f623e3a20576520617265206e6f742073656c6c696e6720616363657373206f722073656c6c696e6720612070726f647563743b20627574207261746865722075736572732061726520706c656467696e6720746f20737570706f72742074686501145f2070726f6a65637420616e6420696e2065786368616e676520776527726520726577617264696e67207468656d206279206c657474696e67207468656d207472792052452d414f4c20696e206561726c7920616c706861206163636573732e01142e3c62723e3c62723e596f752068617665206c6f6767656420696e2061732061204775657374213c62723e3c62723e01142a3c623e52652d414f4c3c2f623e20697320616e20414f4cae2073657276657220656d756c61746f72202d01145320776869636820747269657320746f2070726f7669646520616e20657870657269656e636520746861742077617320617661696c61626c6520647572696e6720746865203139393073272e3c62723e3c62723e011457417320612047756573742c20796f757220657870657269656e63652077696c6c206265206c696d6974656420746f206368617420726f6f6d7320616e64206d65737361676520626f617264732c20686f77657665722c2001145d796f752077696c6c206e6f7420626520616c6c6f77656420746f20706f7374206d6573736167657320746f2074686520626f617264732e2042757420796f752063616e20667265656c79206368617420696e20726f6f6d73213c62723e011d0001110320001e0010000002000d";

            P3Packet p = new P3Packet(Convert.FromHexString(packet));

            Assert.IsTrue(p.FDO.Token == "AT", "Token is not read correctly, is supposed to be an AT token");
            Assert.IsTrue(p.FDO.HasAtomStream, "Is supposed to have an atom stream");
            Assert.IsTrue(p.FDO.StreamIDLength == 2, "Is supposed to have an atom stream id of 2 bytes length");
            CollectionAssert.AreEqual(p.FDO.StreamID, new byte[] { 0x03,0xf2 }, "Has not read the ID 0x03f2 correctly");
        }

        [TestMethod()]
        public void CheckReadsAtoms()
        {
            string packet = "5aa43d02f1131120415403f20001000d040002320101001303200128010901010c010500000000000c000500000000a1011d000109013501000101102401011003010010040100100c0320001e1008015b10400105103a0320001e01000108190000101702371c100b010110010101010200010a010101142c3c68313e57656c636f6d6520746f2052652d414f4c205b414c5048415d2c204775657374384c553c2f68313e01146f3c623e446973636c61696d65723c2f623e3a20576520617265206e6f742073656c6c696e6720616363657373206f722073656c6c696e6720612070726f647563743b20627574207261746865722075736572732061726520706c656467696e6720746f20737570706f72742074686501145f2070726f6a65637420616e6420696e2065786368616e676520776527726520726577617264696e67207468656d206279206c657474696e67207468656d207472792052452d414f4c20696e206561726c7920616c706861206163636573732e01142e3c62723e3c62723e596f752068617665206c6f6767656420696e2061732061204775657374213c62723e3c62723e01142a3c623e52652d414f4c3c2f623e20697320616e20414f4cae2073657276657220656d756c61746f72202d01145320776869636820747269657320746f2070726f7669646520616e20657870657269656e636520746861742077617320617661696c61626c6520647572696e6720746865203139393073272e3c62723e3c62723e011457417320612047756573742c20796f757220657870657269656e63652077696c6c206265206c696d6974656420746f206368617420726f6f6d7320616e64206d65737361676520626f617264732c20686f77657665722c2001145d796f752077696c6c206e6f7420626520616c6c6f77656420746f20706f7374206d6573736167657320746f2074686520626f617264732e2042757420796f752063616e20667265656c79206368617420696e20726f6f6d73213c62723e011d0001110320001e0010000002000d";
            byte[,] expectedAtoms = new byte[,] { { 0, 1 },{ 13, 4 },{ 2, 50 },{ 0, 19 },{ 1, 9 },{ 12, 1 },{ 12, 0 },{ 1, 29 },{ 1, 9 },{ 1, 0 },{ 16, 36 },{ 16, 3 },{ 16, 4 },{ 16, 12 },{ 16, 8 },{ 16, 64 },{ 16, 58 },{ 1, 0 },{ 25, 0 },{ 16, 23 },{ 16, 11 },{ 16, 1 },{ 1, 2 },{ 1, 10 },{ 1, 20 },{ 1, 20 },{ 1, 20 },{ 1, 20 },{ 1, 20 },{ 1, 20 },{ 1, 20 },{ 1, 20 },{ 1, 29 },{ 1, 17 },{ 0, 16 },{ 0, 2 },{ 0, 1 },{ 13, 4 },{ 2, 50 },{ 0, 19 },{ 1, 9 },{ 12, 1 },{ 12, 0 },{ 1, 29 },{ 1, 9 },{ 1, 0 },{ 16, 36 },{ 16, 3 },{ 16, 4 },{ 16, 12 },{ 16, 8 },{ 16, 64 },{ 16, 58 },{ 1, 0 },{ 25, 0 },{ 16, 23 },{ 16, 11 },{ 16, 1 },{ 1, 2 },{ 1, 10 },{ 1, 20 },{ 1, 20 },{ 1, 20 },{ 1, 20 },{ 1, 20 },{ 1, 20 },{ 1, 20 },{ 1, 20 },{ 1, 29 },{ 1, 17 },{ 0, 16 },{ 0, 2 } };
            P3Packet p = new P3Packet(Convert.FromHexString(packet));

            Assert.IsTrue(p.FDO.Token == "AT", "Token must be AT");
            p.FDO.parseAtoms();

            Assert.IsTrue(p.FDO.Atoms.Count > 1);
            byte[,] gotAtoms = new byte[p.FDO.Atoms.Count, 2];

            for(int i = 0; i < p.FDO.Atoms.Count; i++)
            {
                gotAtoms[i, 0] = (byte)p.FDO.Atoms[i].ProtocolNum;
                gotAtoms[i, 1] = (byte)p.FDO.Atoms[i].AtomNum;
                Debug.WriteLine("Protocol Name: " + p.FDO.Atoms[i].ProtocolName);
            }


            CollectionAssert.AreEqual(expectedAtoms, gotAtoms, "Did not parse the expected atoms");

        }
    }
}